select * from emp;
-- 주석 단축키! ctrl + /
-- 안녕하세요!
-- 주석문입니다!
-- select : 특정테이블의 컬럼명을 선택하는 명령어.
-- 1) * : 전체 컬럼을 생성된 순서로 list 할 때
-- 2) 컬럼명 : 해당 data를 보기위한 명령어
-- 3) from table명 : table을 list 하기 위해
select * from emp; -- emp table의 전체 컬럼내용을 list
select empno, job from emp; -- emp table의 컬럼중에 empno와 job 순으로 list
select deptno, ename, sal from emp; -- 부서명, 이름 급여 순으로 list
-- 실제 프로그램과 로딩부분은 컬럼명이 중요함.
-- empno : 사원번호, ename : 사원이름, job : 직책, mgr : 관리자의 사번
-- hiredate : 입사일, sal : 연봉, comm : 보너스, deptno : 부서번호
-- 문제. 사원이름과 직책, 부서번호 순으로 출력
select ename, job, deptno from emp;

-- 산술 연산자
-- database의 컬럼단위로 연산을 처리할 수 있다.
-- 기본적인 사칙연산(+,-,*,/).. but %는 없다.
-- mod라는 함수를 사용해야함.
select * from emp;						-- 현재 연봉에 +100을 더한 값을 출력! (이름, 급여)
select ename, sal, (sal+100), sal-10, sal/10, sal*2 from emp;
-- 컬럼간의 연산처리 : 컬럼명1 "연산기호" 컬럼명2
select * from emp;
-- ex) 부서번호와 연봉을 합산한 내용
select sal, deptno, sal+deptno from emp;
-- 문제. 연봉이 올해 전직원 대상으로 10% 인상됨.
--		사원명, 기존연봉, 인상분, 최종연봉 출력
select ename, sal, (1.1-1)*sal, 1.1*sal from emp;
select * from emp;						-- 자꾸 반복하는 걸 봐서는 이게 있어야 하나부다..
-- 문제. 부서별로 연봉인상분을 다르게 책정.
-- 부서번호 10 => 10%, 20 =>20%, 30 => 30%로 인상
-- 이름, 부서명, 연봉, 인상된 연봉
select ename, deptno, sal, (deptno*0.01+1)*sal from emp;

-- 문자열을 표현
-- database 무자열 연결처리는 || 를 활용!!
select '사원의 이름은 '||ename||'아고, 부서번호는 '||' 입니다!' from emp;
select * from emp;
-- 예제. 사원번호가 @@@인 @@@은 올해 연봉이 @@@@ 입니다!
select '사원번호가 '||empno||'인 '||ename||'은 올해 연봉이 '||sal||'만원 입니다!' from emp;

/*과제
1. ename은 현재 연봉이 @@@만원인데, 최근에 5% 인상된 금액이며, 작년 연봉은 @@@만원이었습니다.
2. ename의 입사일은 hiredate 입니다.
3. 직책인 @@@인 @@@은 부서번호가 @@@ 입니다.
4. @@@님은 현재 연봉과 보너스의 합산액이 @@@입니다.
*/

-- nvl()
-- null : database에는 데이터가 없는 값을 null값이라고 한다. 공백도('')도 0도 아닌
--		  data가 없음을 의미한다.
-- 프로그램에서 쓰는 초기값과 구분해서 알고 있어야한다.
-- 주의. 화면과 연동될 때는 null이 표시되거나 nullpointerException 에러가 발생한다.
-- 또한 data 연산도 정상적으로 되지 않는다.
select sal, sal+null from emp;					-- null 값과 연산이 되면 그냥 null이 출력된다!

-- 그래서 database에서는 null에 대한 연산의 정상적인 처리를 위해 함수를 만들어서 활용한다.
-- nvl을 활용하면 null 값일 때, 초기값에 대한 정의를 해서 정상처리가 가능하게 한다.
-- nvl(컬럼명, data가 null일때 처리할 data) 두 개의 parameter를 받는다!
select * from emp;
select comm, nvl(comm,0), comm+sal, nvl(comm,0)+sal from emp;